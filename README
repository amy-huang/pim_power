This tool is meant to measure power consumption of concurrent data structure applications 
simulated on a PIM setup in SMCSim, an ongoing hardware/software design project 
directed by Professors R. Bahar and M. Herlihy at Brown University.

This part of the README explains McPAT, its supporting tools, and how to get it set up; the same is 
done for CACTI. See the master script after that.

 __  __      ____      _____
|  \/  | ___|  _ \ / \|_   _|
| |\/| |/ __| |_) / _ \ | |  
| |  | | (__|  __/ ___ \| |  
|_|  |_|\___|_| /_/   \_\_| Core, cache, interconnect energy                          

------------------------------------------------------------------------------------------
| ./mcpat/mcpat <stats file> <config file> <mcpat XML file>
|
|     - The stats.txt is created by gem5 during simulation, and can be found 
|       in SMC-WORK/scenarios/<a number>/multithread_<something something>. 
|       For example, "SMC-WORK/scenarios/31/multithread_fc_q-p"
|       Its format is [column 1]: Stat name [column 2]: Stat value; for 
|       example, "sim_ticks   3736252"
|     - The config.json is found in the same place, and shows the hierarchy 
|       of components in the system.
|     - The XML file you must prepare yourself. For each component, like
|       "core" or "core.icache", there are parameter names and values that
|       go together as well as statistic names and values. 
|       For example, 
|       <stat name="idle_cycles" value="11840"/>
------------------------------------------------------------------------------------------

Most of the work is getting the right parameters to match the simulator 
configuration and statistic values from the stats file, which is done with:

------------------------------------------------------------------------------------------
| python ./gem5tomcpat/GEM5ToMcPAT.py <stats file> <config file> <gem5tomcpat XML file>
|
| GEM5ToMcPAT makes it easy to pull parameter values from the config file 
| and statistic values from the config and stats file. 
| The gem5tomcpat XML file, instead of having numerical values for each stat, 
| should have the name of a stats file stat to pull the value from.
| E.g. <stat name="idle_cycles" value="stats.system.cpu.totalIdleCycles"/>
| This will pull the stat system.cpu.totalIdleCycles from the stats file, and replace

|
| Params can be pulled from the config.json, with "config.<param name>" for value.
| By default, the result is written to mcpat-out.xml, which is the in file to mcpat.
------------------------------------------------------------------------------------------

Making the gem5tomcpat XML file can be tedious, so I made a script to make replacing
the values of params and stats easier:

------------------------------------------------------------------------------------------
| python <input XML file> <replacements text file> <output XML file>
|
| The input XML file can be any XML file from mcpat/ProcessorDescriptionFiles as a base. 
| The replacements text file dictates what parameter values or stat names to use for each
| XML param or stat, with columns being component, name, and value.
| This is less tedious than directly editing an XML file, though the comments in 
| the templates have important information about the stats/params themselves.
| What you get can then be used as the input XML file to gem5tomcpat.
------------------------------------------------------------------------------------------

So here is what to do in chronological order.
    1) Get python (2.7.6 or beyond). 
    2) Clone gem5tomcpat and mcpat into this directory:
        i) https://bitbucket.org/dskhudia/gem5tomcpat
        ii) https://github.com/HewlettPackard/mcpat
    3) Pick an XML template to use from mcpat/ProcessorDescriptionFiles
        3.5) Clean it - remove all comments, and remove any spaces in the value
             fields. E.g. value="3,2,1" instead of value="3, 1,3 "
    4) Make a replacements text file like the example one in this dir,
       according to your simulator's stats file and system configuration
       (This will take the longest)
    5) Run replace_xml_vals.py to get the gem5tomcpat xml file
    6) Use this xml file when running the master script!

  ____    _    ____ _____ ___ 
 / ___|  / \  / ___|_   _|_ _|
| |     / _ \| |     | |  | | 
| |___ / ___ \ |___  | |  | | 
 \____/_/   \_\____| |_| |___| Main memory energy

Cacti is much easier to use than McPAT. It takes hybrid memory cube (HMC) parameters
in a config file, and then gives energy per activation, read/write, and precharge.

What to do:
    1) Clone CACTI into this directory:
        i) https://github.com/HewlettPackard/cacti
    1.5) Move line "tsv_length *= g_ip->num_die_3d;" in parameter.cc to line 846,
         according to https://github.com/HewlettPackard/cacti/issues/2
    2) Use 3DDRAM_Samsung3D8Gb_extened.cfg as a basis for putting in HMC 
       specifications use in your simulation
       (This should take the longest)
    2.5) Make sure to include -num_clk and -mem_data_width
         Number of clock pins and width of memory data bus; mitigates segfaults
       in stats file to get total
    3) Use this config file in the master script.




This part of the README explains how to set up a new experiment directory and get 
power results.

1. Make a directory describing the experiment - for example, queue_page_policy 
   for running a queue simulation twice, changing only the page policy between
   the 2 runs.
2. Copy the 2 relevant stats files into this directory. For us, that will be 
   from the smc directory, probably from a paper-specific sub-directory.
3. Copy over the config files needed - if cache size or page policy is a 
   changed variable, then 1 for each simulation is needed.
4. Copy a "get_energy.bash" script from the one of the other experiment directories
   and change it to use the new directory name, stats files, config files. 
   These will already use the right XMLs for our host/pim setups.
5. Run it and check that the output looks about right - no errors, just status 
   messages. If one of the scripts fails, it won't stop, but the output files
   will clue you in on what happened.
    -> Be sure to check one of the -results.txt, -stats.txt, -cpu_power.txt, 
    -pim_power.txt and .tsv files in that case.
6. You should end up with many intermediate files for each # of threads per run
   and an aggregate .tsv file listing all important stats. Copy+paste those
   into a google sheet and borrow formatting/headers from previous ones, and
   share on the dropbox as an .xlsx

Other notes: paper latex things are in the svn group for Brown embedded systems,
and extensive docs are in google drive.








Amy Huang, summer UTRA 2018, with the gracious help of Jiwon Choe (PhD student)
